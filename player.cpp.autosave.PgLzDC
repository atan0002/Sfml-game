#include "player.h"
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
#include <math.h>

player::player(const sf::Vector2f &position)
{
 setPosition(position);

}

void player::moveplayer(sf::Time &elapsed,sf::View &v,std::vector<std::unique_ptr<Platform>> &p){

    auto bounds = getGlobalBounds();
    float t = elapsed.asSeconds();
    if(bounds.top+bounds.height<50+bounds_bottom_){
    //gravity

        v_y += elapsed.asSeconds() *  a_y_;
  move(0, v_y * elapsed.asSeconds());

}
    for(auto &el:p)
    {
        if(el->getGlobalBounds().intersects(this->getGlobalBounds())&& jump==false)
        {
            move(0,-t*std::abs(v_y));

        }

    }
    if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left)){

bool collides = false;
        move(t*-std::abs(v_x),0);
        v.move(t*-std::abs(0.9*v_x),0);
        for(auto &el:p)
        {
            if(el->getGlobalBounds().intersects(this->getGlobalBounds()))
            {
                collides=true;
                move(t*std::abs(v_x),0);

            }
        }

    }
    if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
    {
        move(t*std::abs(v_x),0);
        v.move(t*std::abs(0.9*v_x),0);
bool collides = false;
        for(auto &el:p)
        {
            if(el->getGlobalBounds().intersects(this->getGlobalBounds()))
            {
                collides=true;
                move(-t*std::abs(v_x),0);
            }
        }

    }



    if((sf::Keyboard::isKeyPressed(sf::Keyboard::Space)&&(bounds.top>bounds_top_))&&
            ((getGlobalBounds().top+getGlobalBounds().height-1)>bounds_bottom_) )
    {
//(getGlobalBounds().top+getGlobalBounds().height-1)>bounds_bottom_ ||
        //double h=v_y*t+(a_y_*pow(t,2))/2;
        move(0,-150);

        bool collides = false;
        for(auto &el:p){
       /*     if((el->getGlobalBounds().top+el->getGlobalBounds().height+1)==this->getGlobalBounds().top){
                this->move(0,h);
                collides=true;
            }

      */
     if( el->getGlobalBounds().intersects(this->getGlobalBounds()) ){
       collides=true;
          move(0,-150);
          jump=true;




     }
          /* if((el->getGlobalBounds().top+1)==(this->getGlobalBounds().top+this-> getGlobalBounds().height)){
               this->move(0,-h);
           }*/
}


}


}




void player::drawplayer(sf::RenderWindow &window){



}

void player:: setAcceleration(float acceleration_x, float acceleration_y) {
        a_x_ = acceleration_x;
        a_y_ = acceleration_y;
    }

void player:: setSpeed(float v_x_, float v_y_) {
    v_x = v_x_;
    v_y= v_y_;

}


void player::setBounds(const float &left,const float &right,const float &top,const float &bottom)
  {
     bounds_top_ = top;
     bounds_left_ = left;
     bounds_right_ = right;
     bounds_bottom_ = bottom;
  }


